#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>
#include <ctype.h>
#include <sqlenv.h>

const char DB_NAME_KEY[16] = "db2.name";
const char DB_USER_KEY[16] = "db2.username";
const char DB_PASS_KEY[16] = "db2.password";
const char BATCH_KEY[16] = "p2.batch.input";

struct sqlca sqlca;

EXEC SQL BEGIN DECLARE SECTION;
char db_name[20];
char db_user[20];
char db_pass[20];

int cus_id;
char cus_name[15];
char cus_gender;
int cus_age;
int cus_pin;
int acc_num;
int acc_id;
int acc_bal;
char acc_type;
char acc_status; 

int src_cid;
int dest_cid;
int trans_amt;
int a_total;
int b_min;
int b_max;
int b_avg;
EXEC SQL END DECLARE SECTION;

  /* Declare Fucntions / Headers */
void screenOne(void);
void logInPage(void);
bool logIn(int ursname, int pw);
void screenTwo(int ursname);
bool authenticateUser(int ursname, int accNum);
void adminPage(void);

  /**
   * Create a new customer.
   * @param name customer name
   * @param gender customer gender
   * @param age customer age
   * @param pin customer pin
   */
static void newCustomer(char* name, char* gender, char* age, char* pin)
{
  printf(":: CREATE NEW CUSTOMER - RUNNING\n");
  // store all inputs into SQL vars
  strcpy(cus_name, name);
  char gender_input = *gender;
  cus_gender = gender_input;
  cus_age = atoi(age);
  cus_pin = atoi(pin);

  // insert new customer into p2.customer
  EXEC SQL INSERT INTO P2.CUSTOMER (ID, Name, Gender, Age, Pin) VALUES(DEFAULT,:cus_name, :cus_gender, :cus_age, :cus_pin); 
  
  // Retrieving id from result set
  EXEC SQL DECLARE a1 CURSOR FOR 
  SELECT id FROM P2.CUSTOMER 
  WHERE Name = :cus_name AND Gender = :cus_gender AND Age = :cus_age AND Pin = :cus_pin;
  EXEC SQL OPEN a1;
  EXEC SQL FETCH a1 INTO :cus_id;
  printf("Your customer ID is:    %d\n", cus_id);
  EXEC SQL CLOSE a1;
  printf(":: CREATE NEW CUSTOMER - SUCCESS\n");
}

  /**
   * Open a new account.
   * @param id customer id
   * @param type type of account
   * @param amount initial deposit amount
   */
static void openAccount(char* id, char* type, char* amount)
{
  printf(":: OPEN ACCOUNT - RUNNING\n");
  // store all inputs into SQL vars
  cus_id = atoi(id);
  char type_input = *type;
  acc_type = type_input;
  acc_bal = atoi(amount);
  acc_status = 'A';

  // insert new account into p2.account
  EXEC SQL INSERT INTO p2.account (Id,Balance,type,status) VALUES(:cus_id, :acc_bal, :acc_type, :acc_status); 

  // retrieve the corresponding account number for the id and print it for the customer
  EXEC SQL DECLARE f1 CURSOR FOR 
  SELECT number FROM P2.ACCOUNT
  WHERE Id = :cus_id AND balance = :acc_bal AND status = :acc_status AND type = :acc_type;
  EXEC SQL OPEN f1;
  EXEC SQL FETCH f1 INTO :acc_num;
  if ( sqlca.sqlcode != 100)
  {
    printf("Your account number is:    %d\n", acc_num);
    EXEC SQL CLOSE f1;
    printf(":: OPEN ACCOUNT - SUCCESS\n");
  }
  else
  {
    printf(":: OPEN ACCOUNT - FAIL\n");
  }

}

  /**
   * Close an account.
   * @param accNum account number
   */
static void closeAccount(char* accNum)
{
  printf(":: CLOSE ACCOUNT - RUNNING\n");
  // store all inputs into SQL vars
  acc_num = atoi(accNum);

  // update the corresponding account in p2.account table
  EXEC SQL UPDATE P2.ACCOUNT SET balance = 0, status = 'I' WHERE NUMBER = :acc_num;

  printf(":: CLOSE ACCOUNT - SUCCESS\n");
}

  /**
   * Deposit into an account.
   * @param accNum account number
   * @param amount deposit amount
   */
static void deposit(char* accNum, char* amount)
{
  printf(":: DEPOSIT - RUNNING\n");
  // store all inputs into SQL vars
  acc_num = atoi(accNum);
  int amount_input = atoi(amount);

  // retrieve the balance from the corresponding account number
  EXEC SQL DECLARE c1 CURSOR FOR 
  SELECT Balance FROM P2.ACCOUNT
  WHERE Number = :acc_num;
  EXEC SQL OPEN c1;
  EXEC SQL FETCH c1 INTO :acc_bal;

    acc_bal = acc_bal + amount_input;
    EXEC SQL CLOSE c1;
    EXEC SQL UPDATE P2.ACCOUNT SET BALANCE = :acc_bal WHERE Number = :acc_num;
    printf(":: DEPOSIT - SUCCESS\n");
}

  /**
   * Withdraw from an account.
   * @param accNum account number
   * @param amount withdraw amount
   */
static void withdraw(char* accNum, char* amount)
{
  printf(":: WITHDRAW - RUNNING\n");
  // store all inputs into SQL vars
  acc_num = atoi(accNum);
  int amount_input = atoi(amount);

  // retrueve the balance from the corresponding amount, deduct the right amount
  EXEC SQL DECLARE e1 CURSOR FOR 
  SELECT Balance FROM P2.ACCOUNT
  WHERE Number = :acc_num;
  EXEC SQL OPEN e1;
  EXEC SQL FETCH e1 INTO :acc_bal;
  acc_bal = acc_bal - amount_input;
  EXEC SQL CLOSE e1;

  // update the new balance
  EXEC SQL UPDATE P2.ACCOUNT SET BALANCE = :acc_bal WHERE Number = :acc_num;

  printf(":: WITHDRAW - SUCCESS\n");
}

  /**
   * Transfer amount from source account to destination account. 
   * @param srcAccNum source account number
   * @param destAccNum destination account number
   * @param amount transfer amount
   */
static void transfer(char* srcAccNum, char* destAccNum, char* amount)
{
  printf(":: TRANSFER - RUNNING\n");
  // transfer amount
  deposit(destAccNum, amount);
  withdraw(srcAccNum, amount);
  printf(":: TRANSFER - SUCCESS\n");
}

  /**
   * Display account summary.
   * @param cusID customer ID
   */
static void accountSummary(char* cusID)
{
  printf(":: ACCOUNT SUMMARY - RUNNING\n");
  // store inputs into SQL vars
  bool run = false;
  cus_id = atoi(cusID);

  // retrieve the number and balance from the result set
  EXEC SQL DECLARE d1 CURSOR FOR 
  SELECT Number, Balance FROM P2.ACCOUNT
  WHERE id = :cus_id AND STATUS = 'A';
  EXEC SQL OPEN d1;
  EXEC SQL FETCH d1 INTO :acc_num, :acc_bal;

  printf("number      balance    \n----------- -----------\n");
  while (sqlca.sqlcode != 100)
  {
    // if retreieve successfully
    printf("%11d %11d\n", acc_num, acc_bal);
    EXEC SQL FETCH d1 INTO :acc_num, :acc_bal;
    run = true;
  }
  EXEC SQL CLOSE d1;

  // retrieve the total sum of all balance
  EXEC SQL DECLARE f2 CURSOR FOR 
  SELECT sum(balance) FROM P2.ACCOUNT
  WHERE Id = :cus_id AND status = 'A';
  EXEC SQL OPEN f2;
  EXEC SQL FETCH f2 INTO :a_total;
  if (run)
  {
    // if retrieve successfully
   printf("-----------------------\ntotal               %d\n", a_total);
   EXEC SQL CLOSE f2;
   printf(":: ACCOUNT SUMMARY - SUCCESS\n");
 }
 else
 {
  printf(":: ACCOUNT SUMMARY - FAIL\n");
}

}

  /**
   * Display Report A - Customer Information with Total Balance in Decreasing Order.
   */
static void reportA()
{
  printf(":: REPORT A - SUCCESS\n");

  // retrieve the right data from the result set
  EXEC SQL DECLARE g1 CURSOR FOR
  SELECT distinct p2.customer.id, p2.customer.name, p2.customer.age, p2.customer.gender, p2.total_balance.total
  FROM p2.TOTAL_BALANCE, P2.ACCOUNT, P2.CUSTOMER WHERE 
  p2.customer.id = p2.total_balance.id AND p2.account.status = 'A' ORDER BY p2.total_balance.total DESC;

  EXEC SQL OPEN g1;
  EXEC SQL FETCH g1 INTO :cus_id, :cus_name, :cus_age, :cus_gender, :a_total;
  printf("id          name            gender age         total      \n----------- --------------- ------ ----------- -----------\n");
  while (sqlca.sqlcode != 100)
  {
    printf("%-11d %-15s %-6c %-11d %-11d\n", cus_id, cus_name, cus_gender, cus_age, a_total);
    EXEC SQL FETCH g1 INTO :cus_id, :cus_name, :cus_age, :cus_gender, :a_total;
  }
  EXEC SQL CLOSE g1;
}
  /**
   * Display Report B - Customer Information with Total Balance in Decreasing Order.
   * @param min minimum age
   * @param max maximum age
   */
static void reportB(char* min, char* max)
{
  printf(":: REPORT B - RUNNING\n");
  // store the inputs into SQL vars
  b_min = atoi(min);
  b_max = atoi(max);

  // retrieve the avg balance of all from the result set
  EXEC SQL DECLARE h1 CURSOR FOR
  SELECT sum(balance)/count(DISTINCT p2.account.id)
  FROM P2.CUSTOMER, P2.ACCOUNT WHERE P2.CUSTOMER.AGE >= :b_min 
  AND P2.CUSTOMER.AGE <= :b_max AND P2.CUSTOMER.ID = P2.ACCOUNT.ID;

  EXEC SQL OPEN h1;
  EXEC SQL FETCH h1 INTO :b_avg;

  if (sqlca.sqlcode != 100)
  {
    printf("average    \n-----------\n%-11d\n", b_avg);
    EXEC SQL CLOSE h1;
    printf(":: REPORT B - SUCCESS\n");
  }
  else
  {
    printf(":: REPORT B - FAIL\n");
  }
}

  /**
   * Retrieve database connection info from properties file.
   * @param filename name of properties file
   */
static void init(char filename[])
{
    // open file
  FILE *fp = fopen(filename, "r");
    // print error if file cannot be opened
  if (fp == NULL)
  {
    printf("Cannot open properties file %s\n", filename);
  }
  else
  {
    char *cur_line = (char *) malloc(256);
      // read each line
    while ( fscanf(fp, "%s", cur_line) != EOF)
    {
      char *line_copy = (char *) malloc(256);
      char *token;
        // copy current line
      strcpy(line_copy, cur_line);
        // tokenize line and save connection values
      while ( (token = strsep(&line_copy, "=")) != NULL )
      {
        if ( strcmp(token, DB_NAME_KEY) == 0)
        {
          token = strsep(&line_copy, "=");
          strcpy(db_name, token);
        }
        else if ( strcmp(token, DB_USER_KEY) == 0)
        {
          token = strsep(&line_copy, "=");
          strcpy(db_user, token);
        }
        else if ( strcmp(token, DB_PASS_KEY) == 0)
        {
          token = strsep(&line_copy, "=");
          strcpy(db_pass, token);
        }
        else
        {
          return;
        }
      }
    }
  }
    // close file
  fclose(fp);
}


  /**
   * Open database connection.
   */
static void open_db()
{
  EXEC SQL CONNECT TO :db_name USER :db_user USING :db_pass;
}

  /**
   * Close database connection.
   */
static void close_db()
{
  EXEC SQL CONNECT RESET;
}


  /**
   * Test database connection.
   */
static void test_connection()
{
  printf(":: TEST - CONNECTING TO DATABASE\n");
  open_db();
    // check returned sqlcode
  if (sqlca.sqlcode == 0)
  {
    printf(":: TEST - SUCCESSFULLY CONNECTED TO DATABASE\n");
    close_db();
    printf(":: TEST - DISCONNECTED FROM DATABASE\n");
  }
  else
  {
    printf(":: TEST - FAILED CONNECTED TO DATABASE\n");
    printf(":::: ERROR SQLCODE %i\n", sqlca.sqlcode);
  }  
}

  /**
   * Execute function from batch input.
   * @param arr array of strings
   * @param size length of p array
   */
void batch_execute(char** arr, int size)
{
  if (size < 0)
  {
    printf("Invalid parameter count");
  }
  else
  {
    printf("\n");    
    if (strcmp(arr[0], "#newCustomer") == 0)
    {
      newCustomer(arr[1], arr[2], arr[3], arr[4]);
    }
    else if (strcmp(arr[0], "#openAccount") == 0)
    {
      openAccount(arr[1], arr[2], arr[3]);
    }
    else if (strcmp(arr[0], "#closeAccount") == 0)
    {
      closeAccount(arr[1]);
    }
    else if (strcmp(arr[0], "#deposit") == 0)
    {
      deposit(arr[1], arr[2]);
    }
    else if (strcmp(arr[0], "#withdraw") == 0)
    {
      withdraw(arr[1], arr[2]);
    }
    else if (strcmp(arr[0], "#transfer") == 0)
    {
      transfer(arr[1], arr[2], arr[3]);
    }
    else if (strcmp(arr[0], "#accountSummary") == 0)
    {
      accountSummary(arr[1]);
    }
    else if (strcmp(arr[0], "#reportA") == 0)
    {
      reportA();
    }
    else if (strcmp(arr[0], "#reportB") == 0)
    {
      reportB(arr[1], arr[2]);
    }
    else
    {
      printf("Could not find function to batch_execute: %s", arr[0]);
    }
    printf("\n");
  }
}

  /**
   * Run batch input given filename.
   * @param filename name of properties file
   */
static void batch_run(char filename[])
{
    // open file
  FILE *fp = fopen(filename, "r");
    // print error if file cannot be opened
  if (fp == NULL)
  {
    printf("Cannot open properties file %s\n", filename);
  }
  else
  {
    int batch_mode = 0;
    char *cur_line = (char *) malloc(256);
      // read each line
    while ( fscanf(fp, "%s", cur_line) != EOF)
    {
      char *line_copy = (char *) malloc(256);
      char *token;
        // copy current line
      strcpy(line_copy, cur_line);
      if (batch_mode == 0)
      {
          // tokenize line and find batch key
        while ( (token = strsep(&line_copy, "=")) != NULL )
        {
          if ( strcmp(token, BATCH_KEY) == 0)
          {
            batch_mode = 1;
          }
          else
          {
            break;
          }
        }
      }
      else if (batch_mode == 1)
      {
        char *token;
        char **token_arr = (char **) malloc(sizeof(char*) * 1);
        int token_cnt = 0;
          // get each token and save to array
        while ( (token = strsep(&line_copy, ",")) != NULL )
        {
          token_arr = (char **) realloc(token_arr, (token_cnt + 1) * sizeof(char*));
          token_arr[token_cnt] = (char *) malloc( strlen(token) + 1 );
          strcpy(token_arr[token_cnt], token);
          token_cnt++;
        }
          // run function
        batch_execute(token_arr, token_cnt);
      }
    }
  }
    // close file
  fclose(fp);
}

int main(int argc, char *argv[])
{
  if (argc < 2)
  {
    printf("Need properties file\n");
  }
  else
  {
    init(argv[1]);
    test_connection();

    open_db();
    batch_run(argv[1]);
    printf("Welcome to the Self Service Banking System. Directing to first screen...\n");
    screenOne();
    close_db();
  }
  return 0;
}


void screenOne(void){
 char c[2];
 bool run = true;
 char name[15];
 char gender;
 int age, pin, i, id;
 while(run){
  printf("Welcome customer!\n1. New Customer\n2. Customer Log In\n3. Exit\n");
  scanf("%c", c);
  while (getchar() != '\n');
  if (c[0] == '1')
  {
    bool name_condition = true;
    printf( "Enter your name: => ");
    scanf(" %s", name);
      // for (i = 0; name[i]!= '\0'; i++){
      //   if (isalpha(name[i]) != 1)
      //   {
      //     printf("Cannot contain numberic values. Please try again\n");
      //     name_condition = false;
      //     break; 
      //   }
      //   else{ name_condition = true;}
      // }
      // if ( name_condition == false)
      // {
      //   continue;
      // }

    printf( "Enter your gender: (It can only be capitalized F or M) => ");
    scanf(" %c", &gender);
    while (getchar() != '\n');
    if (gender != 'F' && gender != 'M')
      {   fprintf(stderr,"Not an acceptable letter, please try again.\n");
    continue;
  }

  char a[3];
  printf( "Enter your age: => ");
  scanf(" %d", &age);
  while (getchar() != '\n');
  if ( age <= 0 || age > 100)
    {   fprintf(stderr,"Not within valid range, please try again.\n");
  continue;
}
sprintf(a, "%d", age);

char p[5];
printf( "Enter your pin: => ");
scanf(" %d", &pin);
while (getchar() != '\n');
if ( pin <= 0 || pin > 9999)
  {   fprintf(stderr,"Not within valid range, please try again.\n");
continue;
}
sprintf(p, "%d", pin);

newCustomer((char*)name, (char*)&gender, (char*)&a, (char*)&p);
}
else if (c[0] == '2')
{
  logInPage();
}
else if (c[0] == '3')
{
  printf("Thank you for choosing us. Have a nice day!\n");
  run = false;
}
else
{
  printf("Unable to read input, pleaase type '1' '2' or '3' only\n");
}
} 
}  

void logInPage(void)
{
  int pin, id;
  bool run = true;
  while (run){
    printf( "Enter your unique customer id: ");
    scanf(" %d", &id);
    while (getchar() != '\n');
    if ( id < -1 || id > 9999)
      {   fprintf(stderr,"Not within valid range, please try again.\n");
    continue;
  }

  printf( "Enter your four digits pin: ");
  scanf(" %d", &pin);
  while (getchar() != '\n');
  if ( pin < -1 || pin > 9999)
    {   fprintf(stderr,"Not within valid range, please try again.\n");
  continue;
}

if (id == 0 && pin == 0)
{
  adminPage();
  break;
}
else if (logIn(id, pin))
{
  printf("identified\n");
  screenTwo(id);
  break;
}
else
{
 printf("Unable to identify, please retry.\n");
 run = false;
}
}
}

void screenTwo(int ursname)
{
  int id, accNum, accNum2, amount;
  char type;
  char a[64], b[64], d[64], c[1];
  bool run = true;
  printf("Passed in ursname: %d", ursname);
  while (run){
    printf("Customer Main Menu\n");
    printf("1. Open Account\n2. Close Account\n3. Deposit\n4. Withdraw\n5. Transfer\n6. AccountSummary\n7. Exit\n");
    scanf("%c", c);
    while (getchar() != '\n');
    if (c[0] == '1')
    {
      printf( "You chose to open an account.\n May I have your id?\n=> ");
      scanf("%d", &id);
      while (getchar() != '\n');
      if ( id <= 0 || id >= 9999)
        {   fprintf(stderr,"Not within valid range, please try again.\n");
      continue;
    }
    sprintf(a, "%d", id);

    printf( "What type of account you want? Enter C for checking, S for saving.\n=> ");
    scanf("%c", &type);
    while (getchar() != '\n');
    if (type != 'C' && type != 'S')
      {   fprintf(stderr,"Not a type that we have, please try again.\n");
    continue;
  }

  printf("How many amount you want to deposit? It has to be greater than 0.\n=> ");
  scanf("%d", &amount);
  while (getchar() != '\n');
  if ( amount <= 0)
    {   fprintf(stderr,"Not within valid range, please try again.\n");
  continue;
}
sprintf(b, "%d", amount);

if( id == ursname)
{
  openAccount((char*)&a, (char*)&type, (char*)&b);
}
else
{
  printf("You cannot open account for somebody else!\n");
}

}
else if (c[0] == '2')
{
  printf("You chose to close an account.\nMay I have the account number that you wish to close?\n=> ");
  scanf("%d", &accNum);
  while (getchar() != '\n');
  sprintf(a, "%d", accNum);
  if (authenticateUser(ursname, accNum))
  {
    closeAccount((char*) &a);
  }
  else{
    printf("You cannot close someone else's account!\n");
  }
}
else if (c[0] == '3')
{
  printf("You chose to deposit..\nMay I have the account number that you wish to deposit into?\n=> ");
  scanf("%d", &accNum);
  while (getchar() != '\n');
  if ( accNum <= 0 || accNum >= 9999)
    {   fprintf(stderr,"Not within valid range, please try again.\n");
  getchar();
  continue;
}
sprintf(a, "%d", accNum);

printf("How much money you wish to deposit?=> ");
scanf("%d", &amount);
while (getchar() != '\n');
if ( amount <= 0)
  {   fprintf(stderr,"Not within valid range, please try again.\n");
continue;
}
sprintf(b, "%d", amount);

deposit((char*) &a, (char*)b);
}
else if (c[0] == '4'){
  printf("You chose to withdraw..\nMay I have the account number that you wish to withdraw from?\n=> ");
  scanf("%d", &accNum);
  while (getchar() != '\n');
  if ( accNum <= 0 || accNum >= 9999)
    {   fprintf(stderr,"Not within valid range, please try again.\n");
  getchar();
  continue;
}
sprintf(a, "%d", accNum);

printf("How much money you wish to withdraw?\n=> ");
scanf("%d", &amount);
while (getchar() != '\n');
if ( amount <= 0)
  {   fprintf(stderr,"Not within valid range, please try again.\n");
getchar();
continue;
}
sprintf(b, "%d", amount);

printf("URSNAME NOW: %d", ursname);
if (authenticateUser(ursname, accNum))
{
  withdraw((char*) &a, (char*) &b);
}
else {
  printf("You cannot withdraw money from someone else's account!\n");
}
}
else if (c[0] == '5'){
  printf("You chose to transfer money..\nMay I have your account number?\n=> ");
  scanf("%d", &accNum);
  while (getchar() != '\n');
  if ( accNum <= 0 || accNum >= 9999)
    {   fprintf(stderr,"Not within valid range, please try again.\n");
  continue;
}
sprintf(a, "%d", accNum);

printf("May I have the other person's account number?\n=> ");
scanf("%d", &accNum2);
while (getchar() != '\n');
if ( accNum2 <= 0 || accNum2 >= 9999)
  {   fprintf(stderr,"Not within valid range, please try again.\n");
continue;
}
sprintf(b, "%d", accNum2);

printf("How much money you wish to transfer?\n=> ");
scanf("%d", &amount);
while (getchar() != '\n');
if ( amount <= 0)
  {   fprintf(stderr,"Not within valid range, please try again.\n");
continue;
}
sprintf(d, "%d", amount);

if (authenticateUser(ursname, accNum))
{
  transfer((char*) &a, (char*) &b, (char*)d);
}
else {
  printf("You cannot withdraw money from someone else's account!\n");
}
}
else if (c[0] == '6'){
  printf("You chose to display your account summary.\nMay I have your id one more time?\n=> ");
  scanf("%d", &id);
  while (getchar() != '\n');
  if ( id <= 0 || id >= 9999)
    {   fprintf(stderr,"Not within valid range, please try again.\n");
  continue;
}
sprintf(a, "%d", id);

if( id == ursname)
{
  accountSummary((char*) &a);
}
else
{
  printf("You cannot check somebody else's account summary!\n");
}

}
else if (c[0] == '7'){run = false;}
else{
  printf("Not a valid option, try again?\n");
}
}
}

bool logIn(int ursname, int pw)
{
  bool done = false;
  cus_id = ursname;
  cus_pin = pw;

  EXEC SQL DECLARE b1 CURSOR FOR 
  SELECT name FROM P2.CUSTOMER 
  WHERE ID = :cus_id AND PIN = :cus_pin;
  EXEC SQL OPEN b1;
  EXEC SQL FETCH b1 INTO :cus_name;

  if ( sqlca.sqlcode != 100)
  {
    done = true;
  }
  EXEC SQL CLOSE b1;
  return done;
}

bool authenticateUser(int ursname, int accNum)
{
  // passed in id
  bool result = false;
  acc_num = accNum;

  // retrieve the correct id 
  EXEC SQL DECLARE i1 CURSOR FOR 
  SELECT ID FROM P2.ACCOUNT
  WHERE NUMBER = :acc_num;
  EXEC SQL OPEN i1;
  EXEC SQL FETCH i1 INTO :cus_id;

  // if there's any data
  if ( sqlca.sqlcode != 100)
  {
   printf("Authenticated\n");
   result = true;
 }
 else{
  printf("Fail to authenticate.\n");
}
EXEC SQL CLOSE i1;

return result;
}

void adminPage(void)
{
  char a[64], b[64], d[64], c[1];
  int id, min, max;
  bool run = true;
  while (run){
    printf("Title – Administrator Main Menu\n");
    printf("1. Account Summary for a Customer\n2. Report A :: Customer Information with Total Balance in Decreasing Order\n3. Report B :: Find the Average Total Balance Between Age Groups\n4. Exit\n");
    scanf("%c", c);
    while (getchar() != '\n');
    if ( c[0] == '1')
    {
      printf("Type the id of the customer that you want to display summary of\n=> ");
      scanf("%d", &id);
      while (getchar() != '\n');
      if ( id <= 0 || id >= 9999)
      {   
        fprintf(stderr,"Not within valid range, please try again.\n");
        continue;
      }
      sprintf(a, "%d", id);

      accountSummary((char*) &a);
    }
    else if ( c[0] == '2')
    {
      reportA();
    }
    else if ( c[0] == '3')
    {
      printf("You chose to compute the avergae total balance between age group.\nPlease input the minimum age\n=> ");
      scanf("%d", &min);
      while (getchar() != '\n');
      if ( min <= 0 || min >= 100)
        {   fprintf(stderr,"Not within valid range, please try again.\n");
      continue;
    }
    sprintf(a, "%d", min);

    printf("\nMaximum age?\n=> ");
    scanf("%d", &max);
    while (getchar() != '\n');
    if ( max <= 0 || max >= 100)
      {   fprintf(stderr,"Not within valid range, please try again.\n");
    continue;
  }
  sprintf(b, "%d", max);

  if ( min > max)
  {
    printf("The minimum age cannot be greater than the maximum age! Please retry.\n");
    continue;
  }
  else if ( max < min)
  {
    printf("The maximum age cannot be lower than the minimum age! Please retry.\n");
    continue;
  }

  reportB((char*) &a, (char*) &b);
}
else if ( c[0] == '4')
{
  run = false;
}
else
{
  printf("Not a valid option, try again?\n");
}
}
}